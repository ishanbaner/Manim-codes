from manim import *
class intro(Scene):
    def construct(self):
        dot1=Dot(point=LEFT,radius=0.1,color=RED).shift(LEFT*2)
        dot2=Dot(point=RIGHT*3,radius=0.1,color=BLUE).shift(LEFT*2)
        dot111=Dot(point=LEFT,radius=0.1,color=RED)
        dot211=Dot(point=RIGHT*3,radius=0.1,color=BLUE)
        l1=Line(start=LEFT,end=RIGHT*3)
        l111=Line(start=LEFT,end=RIGHT*3)
        dot3=Dot(point=UP*1+RIGHT*1,radius=0.1,color=GREEN).shift(LEFT*2)
        dot311=Dot(point=UP*1+RIGHT*1,radius=0.1,color=GREEN)
        l2=Line(start=LEFT,end=RIGHT*1+UP*1)
        l3=Line(start=RIGHT*3,end=RIGHT*1+UP*1)
        l21=Line(start=LEFT,end=RIGHT*1+UP*1)
        l31=Line(start=RIGHT*3,end=RIGHT*1+UP*1)
        dot4=Dot(point=RIGHT*5,radius=0.1,color=RED).shift(LEFT*2)
        l4=Line(start=RIGHT*3,end=RIGHT*5)
        dot5=Dot(point=UP*2+RIGHT*1,radius=0.1,color=YELLOW).shift(LEFT*2)
        dot511=Dot(point=UP*2+RIGHT*1,radius=0.1,color=YELLOW)
        l5=Line(start=RIGHT*1+UP*1,end=UP*2+RIGHT*1)
        l6=Line(start=RIGHT*3,end=RIGHT*1+UP*2)
        l51=Line(start=RIGHT*1+UP*1,end=UP*2+RIGHT*1)
        l61=Line(start=RIGHT*3,end=RIGHT*1+UP*2)
        l7=Line(start=RIGHT*5,end=RIGHT*1+UP*2)
        l8=Line(start=LEFT,end=RIGHT*1+UP*2)
        l81=Line(start=LEFT,end=RIGHT*1+UP*2)
        dot6=Dot(point=RIGHT*3+UP*0.5,radius=0.1,color=ORANGE).shift(LEFT*2)
        l9=Line(start=RIGHT*5,end=RIGHT*3+UP*0.5)
        l10=Line(start=UP*2+RIGHT*1,end=RIGHT*3+UP*0.5)
        l11=Line(start=RIGHT*3,end=RIGHT*3+UP*0.5)
        l12=Line(start=UP*1+RIGHT*1,end=RIGHT*3+UP*0.5)
        dot7=Dot(point=UP*1+RIGHT*1.5,color=ORANGE)
        l13=Line(start=LEFT,end=UP*1+RIGHT*1.5)
        l14=Line(start=RIGHT*3,end=UP*1+RIGHT*1.5)
        l15=Line(start=UP*1+RIGHT*1,end=UP*1+RIGHT*1.5)
        l16=Line(start=UP*2+RIGHT*1,end=UP*1+RIGHT*1.5)
        ngraph=VGroup(l13,l14,l15,l16,l111,l21,l31,l51,l61,l81,dot111,dot211,dot311,dot511,dot7)
        dot11=Dot(point=LEFT,radius=0.1)
        dot21=Dot(point=RIGHT*3,radius=0.1)
        dot31=Dot(point=UP*1+RIGHT*1,radius=0.1)
        dot41=Dot(point=RIGHT*5,radius=0.1)
        dot51=Dot(point=UP*2+RIGHT*1,radius=0.1)
        dot61=Dot(point=RIGHT*3+UP*0.5,radius=0.1)
        mark=Circle(radius=0.3).shift(RIGHT*0.3+UP*0.7)
        mark2=Circle(radius=0.3).shift(RIGHT*3.3+UP*0.9)
        cross=Tex("Crossing number $=1$",color=RED).shift(DOWN*1)
        cross1=Tex("Crossing number $=1$",color=RED).shift(DOWN*1+RIGHT*3)
        graph=VGroup()
        graph.add(l1,l2,l3,l4,l5,l6,l7,l8,l9,l10,l10,l11,l12,dot11,dot21,dot31,dot41,dot51,dot61)
        self.play(Write(graph.shift(LEFT*2)))
        self.wait()
        self.play(FadeIn(dot1,dot2,dot3,dot4,dot5,dot6))
        self.wait(8)
        self.play(Write(mark))
        self.wait(1)
        self.play(Transform(mark,cross))
        graph.add(dot1,dot2,dot3,dot4,dot5,dot6)
        self.wait(7)
        self.play(graph.animate.shift(LEFT*3),mark.animate.shift(LEFT*3))
        self.play(Write(ngraph.shift(RIGHT*2)))
        self.play(Write(mark2))
        self.play(Transform(mark2,cross1))
        self.wait(10)

class state(Scene):
    def construct(self):
        ch=Tex("$\chi(G)=r$").shift(UP*1)
        cr=Tex("$cr(G)\geq cr(K_r)$",color=RED)
        th=Tex("Albertson's Conjecture",color=RED).shift(DOWN*1)
        self.play(Write(ch))
        self.wait(5)
        self.play(Write(cr))
        self.wait(12)
        self.play(Write(th))
        self.wait(10)

class trivial(Scene):
    def construct(self):
        do1=Dot(point=LEFT*3,color=RED)
        do21=Dot(point=LEFT*2,color=RED)
        do22=Dot(point=LEFT*1,color=BLUE)
        l2=Line(start=LEFT*2,end=LEFT*1)
        do31=Dot(point=RIGHT*0.1,color=RED)
        do32=Dot(point=UP*1+RIGHT*0.5,color=BLUE)
        do33=Dot(point=RIGHT*1,color=GREEN)
        l31=Line(start=RIGHT*0.1,end=UP*1+RIGHT*0.5)
        l32=Line(start=RIGHT*0.1,end=RIGHT*1)
        l33=Line(start=RIGHT*1,end=UP*1+RIGHT*0.5)
        d41=Dot(point=RIGHT*2,color=RED)
        d42=Dot(point=RIGHT*3,color=BLUE)
        d43=Dot(point=RIGHT*2.5+UP*0.5,color=GREEN)
        d44=Dot(point=RIGHT*2.5+UP*1,color=YELLOW)
        l41=Line(start=RIGHT*2,end=RIGHT*3)
        l42=Line(start=RIGHT*2,end=RIGHT*2.5+UP*0.5)
        l43=Line(start=RIGHT*2,end=RIGHT*2.5+UP*1)
        l44=Line(start=RIGHT*3,end=RIGHT*2.5+UP*0.5)
        l45=Line(start=RIGHT*3,end=RIGHT*2.5+UP*1)
        l46=Line(start=RIGHT*2.5+UP*0.5,end=RIGHT*2.5+UP*1)
        cr=Tex("Crossing number=0").shift(DOWN*1)
        graph=VGroup()
        f=Tex("$r\geq 5 ?$",color=RED)
        graph.add(do1,l2,do21,do22,l31,l32,l33,do31,do32,do33,l41,l42,l43,l44,l45,l46,d41,d42,d43,d44)
        self.play(Write(graph))
        self.wait(3)
        self.play(Write(cr))
        self.wait(2)
        self.play(FadeOut(graph,cr))
        self.play(Write(f))
        self.wait(12)

class conj(Scene):
    def construct(self):
        rkg=Tex("Richard K Guy")
        crK=Tex(r"$cr(K_n)=$").shift(LEFT*2)
        fn=Tex(r"$\frac{1}{4}\lfloor\frac{n}{2}\rfloor\lfloor\frac{n-1}{2}\rfloor\lfloor\frac{n-2}{2}\rfloor\lfloor\frac{n-3}{2}\rfloor$").shift(RIGHT*2)
        fn1=Tex(r"$\frac{1}{4}\lfloor\frac{n}{2}\rfloor\lfloor\frac{n-1}{2}\rfloor\lfloor\frac{n-2}{2}\rfloor\lfloor\frac{n-3}{2}\rfloor=f(n)$").shift(RIGHT*2.5)
        n=Tex("$n$").shift(DOWN*1)
        eq1=Tex("$\leq 10$").shift(DOWN*1+RIGHT*0.8)
        eq2=Tex("$\leq 12$").shift(DOWN*1+RIGHT*0.8)
        self.play(Write(rkg))
        self.wait(4)
        self.play(rkg.animate.shift(UP*1))
        self.play(Write(crK))
        self.play(Write(fn))
        self.wait(3)
        self.play(Transform(fn,fn1))
        self.play(crK.animate.shift(LEFT*1),fn.animate.shift(LEFT*1))
        self.wait(5)
        self.play(Write(n),Write(eq1))
        self.wait(2)
        self.play(Transform(eq1,eq2))
        self.wait(10)

class lim(Scene):
    def construct(self):
        limit=Tex(r"$\lim\limits_{n\to\infty}\frac{cr(K_n)}{f(n)}$").shift(LEFT*1)
        value=Tex("$\geq 0.8594$").shift(RIGHT*1.5)
        one=Tex("=1").shift(RIGHT*1.5)
        self.play(Write(limit))
        self.wait(1)
        self.play(Write(one))
        self.wait(4)
        self.play(Transform(one,value))
        self.wait(10)

class Dirac(Scene):
    def construct(self):
        Dirac=Tex("Dirac's Theorem",color=RED)
        exc=Tex("$\epsilon_r(G)=2m-(r-1)n$")
        side1=Tex("Total vertices $= n$",color=GREEN).shift(RIGHT*4+UP*0.5).scale(0.5)
        side2=Tex("Total edges $= m$",color=GREEN).shift(RIGHT*4).scale(0.5)
        side3=Tex("Chromatic number $= r$",color=GREEN).shift(RIGHT*4+DOWN*0.5).scale(0.5)
        g=Tex("G is not complete").shift(UP*1)
        r=Tex("$r\geq 3$")
        state=Tex("$\epsilon_r(G)\geq r-3$",color=RED).shift(DOWN*1)
        self.play(Write(Dirac))
        self.wait(2)
        self.play(FadeOut(Dirac))
        self.wait()
        self.play(Write(exc))
        self.wait()
        self.play(Write(side1),Write(side2),Write(side3))
        self.wait(4)
        self.play(exc.animate.shift(UP*2))
        self.play(Write(g))
        self.play(Write(r))
        self.wait(3)
        self.play(Write(state))
        self.wait(10)

class gallai(Scene):
    def construct(self):
        gallai=Tex("Gallai's Bound",color=RED)
        g=Tex("G is not complete").shift(UP*1)
        r=Tex("$r\geq3$")
        state=Tex("With atmost $2r-2$ vertices, have much larger excess",color=RED).shift(DOWN*1)
        n=Tex("$n=r+p$ vertices and $2\leq p \leq r-2$").shift(UP*1)
        imp=Tex("$\epsilon_r(G)\geq pr-p^2-2$",color=RED)
        self.play(Write(gallai))
        self.play(FadeOut(gallai))
        self.play(Write(g))
        self.play(Write(r))
        self.play(Write(state))
        self.wait(4)
        self.play(FadeOut(g,r,state))
        self.wait(3)
        self.play(Write(n))
        self.wait(7)
        self.play(Write(imp))
        self.wait(10)

class KS(Scene):
    def construct(self):
        KSn=Tex("Kostochka's and Steibitz's Bound",color=RED)
        state=Tex(r"If $n\geq r+2$ and $n\neq 2r-1$").shift(UP*1)
        imp=Tex("Then $\epsilon_r(G)\geq 2r-6$")
        self.play(Write(KSn))
        self.play(FadeOut(KSn))
        self.play(Write(state))
        self.wait(3)
        self.play(Write(imp))
        self.wait(5)

class proof1(Scene):
    def construct(self):
        s1=Tex("Till date the conjecture has been verified upto $r\leq 18$").shift(UP*0.5)
        s2=Tex("But a full proof is yet to turn up",color=RED).shift(DOWN*0.5)
        six=Tex("$r=6$")
        Op=Tex("Oporowski and Zhao")
        seven=Tex("$7\leq r \leq 12$")
        progress=Tex("Progress",color=RED)
        r1=Polygon(DOWN*1,DOWN*1+RIGHT*1,RIGHT*1+UP*0.5,UP*0.5,color=GREEN)
        r1.set_fill(GREEN,opacity=1)
        r2=Polygon(UP*0.01+RIGHT*1,UP*0.5+RIGHT*1,UP*0.5+RIGHT*2,UP*0.01+RIGHT*2,color=BLUE)
        r2.set_fill(BLUE,opacity=1)
        r3=Polygon(DOWN*1+RIGHT*1,UP*0.005+RIGHT*1,UP*0.005+RIGHT*2,DOWN*1+RIGHT*2,color=YELLOW)
        r3.set_fill(YELLOW,opacity=1)
        t1=Polygon(DOWN*1,RIGHT*1,RIGHT*1+DOWN*1,color=RED).shift(UP*0.4+RIGHT*0.3)
        t1.set_fill(RED,opacity=1)
        five=Tex("$r=5$")
        albertson=Tex("Michael O. Albertson").shift(UP*0.5)
        cranston=Tex("Daniel W. Cranston")
        fox=Tex("Jacob Fox").shift(DOWN*0.5)
        pol=VGroup()
        pol.add(r1,r2,r3,t1)
        self.play(Write(progress))
        self.wait(3)
        self.play(FadeOut(progress))
        self.wait()
        self.play(Write(five))
        self.wait(2)
        self.play(five.animate.shift(UP*1))
        self.play(FadeIn(pol.shift(LEFT*1)))
        self.wait(8)
        self.play(FadeOut(pol,five))
        self.wait()
        self.play(Write(six))
        self.wait(2)
        self.play(Transform(six,Op))
        self.wait(2)
        self.play(FadeOut(six))
        self.wait()
        self.play(Write(albertson),Write(cranston),Write(fox))
        self.wait(3)
        self.play((Transform(albertson,seven)),(Transform(cranston,seven)),(Transform(fox,seven)))
        self.wait(2)
        self.play(FadeOut(albertson,cranston,fox))
        self.wait()
        self.play(Write(s1))
        self.play(Write(s2))
        self.wait(7)
        self.play(FadeOut(s1,s2))
        self.wait()

class intr(Scene):
    def construct(self):
        e=Tex("$e^{i\pi}$").scale(2)
        self.play(Write(e),run_time=5)
